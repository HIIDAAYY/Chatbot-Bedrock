AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: WhatsApp AI Customer Care Chatbot powered by Amazon Bedrock

Globals:
  Function:
    Runtime: python3.12
    Timeout: 15
    MemorySize: 512
    Tracing: Active

Conditions:
  HasFaqInlineBucket: !Not [!Equals [!Ref FaqInlineBucketName, ""]]

Parameters:
  AppEnv:
    Type: String
    Default: dev
    Description: Application environment name (dev/stage/prod)
  TwilioSecretName:
    Type: String
    Default: twilio-bot-secrets
    Description: Secrets Manager secret name containing Twilio credentials
  TwilioWhatsappFrom:
    Type: String
    Default: 'whatsapp:+14155238886'
    Description: Twilio WhatsApp sender number (format whatsapp:+1...) ketika tidak memakai Messaging Service
  TwilioMessagingServiceSid:
    Type: String
    Default: ''
    Description: Optional Twilio Messaging Service SID (gunakan jika tidak memakai nomor langsung)
  TwilioValidateSignature:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
    Description: Validasi signature Twilio (matikan hanya untuk lokal/pengujian)
  BedrockModelId:
    Type: String
    Description: Amazon Bedrock model identifier
  KnowledgeBaseId:
    Type: String
    Default: ''
    Description: Optional Knowledge Base ID for Retrieve-And-Generate
  BedrockGuardrailId:
    Type: String
    Default: ''
    Description: Optional Bedrock Guardrail identifier
  BedrockGuardrailVersion:
    Type: String
    Default: ''
    Description: Optional Bedrock Guardrail version
  BedrockInferenceProfileArn:
    Type: String
    Default: ''
    Description: Optional inference profile ARN for models that require it (e.g., Claude Sonnet)
  LogLevel:
    Type: String
    Default: DEBUG
    AllowedValues:
      - DEBUG
      - INFO
      - WARNING
      - ERROR
      - CRITICAL
    Description: Logging level for the function
  DiscordPublicKey:
    Type: String
    Default: ''
    Description: Discord Application Public Key for verifying Interactions
  DiscordAppId:
    Type: String
    Default: ''
    Description: Discord Application (Client) ID for follow-up webhook
  FaqInlineBucketName:
    Type: String
    Default: ''
    Description: Optional S3 bucket name that stores the inline FAQ file
  FaqInlineKeyPrefix:
    Type: String
    Default: '*'
    Description: Optional key prefix inside the bucket for the inline FAQ file
  FaqInlineS3Uri:
    Type: String
    Default: ''
    Description: Optional S3 URI to a Markdown FAQ to inline into prompts when KnowledgeBaseId is empty (e.g., s3://bucket/kb/urbanstyle/urbanstyle_faq.md)
  FaqInlinePath:
    Type: String
    Default: ''
    Description: Optional local path packaged with the function to inline FAQ (not recommended for Lambda; use S3 instead)
  FaqInlineMaxChars:
    Type: String
    Default: '18000'
    Description: Max characters of inline FAQ appended to prompts

Resources:
  ChatbotTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      TableName: !Sub '${AWS::StackName}-sessions'
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: false

  ChatbotFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-handler'
      CodeUri: src/
      Handler: app.lambda_handler
      Environment:
        Variables:
          APP_ENV: !Ref AppEnv
          TWILIO_SECRET_NAME: !Ref TwilioSecretName
          TWILIO_WHATSAPP_FROM: !Ref TwilioWhatsappFrom
          TWILIO_MESSAGING_SERVICE_SID: !Ref TwilioMessagingServiceSid
          TWILIO_VALIDATE_SIGNATURE: !Ref TwilioValidateSignature
          DDB_TABLE: !Ref ChatbotTable
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBaseId
          BEDROCK_GUARDRAIL_ID: !Ref BedrockGuardrailId
          BEDROCK_GUARDRAIL_VER: !Ref BedrockGuardrailVersion
          BEDROCK_INFERENCE_PROFILE_ARN: !Ref BedrockInferenceProfileArn
          LOG_LEVEL: !Ref LogLevel
          DISCORD_PUBLIC_KEY: !Ref DiscordPublicKey
          DISCORD_APP_ID: !Ref DiscordAppId
          FAQ_INLINE_S3_URI: !Ref FaqInlineS3Uri
          FAQ_INLINE_PATH: !Ref FaqInlinePath
          FAQ_INLINE_MAX_CHARS: !Ref FaqInlineMaxChars
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatbotTable
        - Statement:
            Effect: Allow
            Action:
              - bedrock:InvokeModel
              - bedrock:InvokeModelWithResponseStream
              - bedrock:Retrieve
              - bedrock:RetrieveAndGenerate
            Resource: '*'
        - Statement:
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${TwilioSecretName}*'
        - Statement:
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            # Avoid circular dependency by not referencing the function logical ID
            Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-handler'
        - !If 
          - HasFaqInlineBucket
          - Statement:
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub 'arn:aws:s3:::${FaqInlineBucketName}/${FaqInlineKeyPrefix}'
          - !Ref 'AWS::NoValue'
      Events:
        WebhookPost:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Path: /webhook
            Method: POST
        DiscordInteractions:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Path: /discord
            Method: POST
        JsonChat:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Path: /chat
            Method: POST
        TestUi:
          Type: HttpApi
          Properties:
            ApiId: !Ref ChatbotApi
            Path: /ui
            Method: GET

  ChatbotApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v1
      CorsConfiguration:
        AllowMethods: [GET, POST, OPTIONS]
        AllowOrigins: ['*']
        AllowHeaders: ['content-type','authorization']

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for Twilio WhatsApp webhook
    Value: !Sub 'https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/v1/webhook'
  DiscordEndpoint:
    Description: API Gateway endpoint URL for Discord Interactions
    Value: !Sub 'https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/v1/discord'
  TestUiUrl:
    Description: Simple web UI for chatting without WhatsApp/Discord
    Value: !Sub 'https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/v1/ui'
  JsonChatUrl:
    Description: JSON chat endpoint (POST {"text":"..."})
    Value: !Sub 'https://${ChatbotApi}.execute-api.${AWS::Region}.amazonaws.com/v1/chat'

 
